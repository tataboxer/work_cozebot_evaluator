// ‰ºòÂåñÁâàÂâçÁ´ØÂ∫îÁî® - Âü∫‰∫éÁé∞ÊúâExpressÊû∂ÊûÑ
class OptimizedAssessmentApp {
    constructor() {
        this.initElements();
        this.initEventListeners();
        this.currentData = null;
        this.currentSessionId = null;
        
        // Á≠âÂæÖ‰æùËµñÂä†ËΩΩ
        this.waitForDependencies();
    }
    
    initSSE() {
        this.eventSource = new EventSource('/api/logs');
        
        this.eventSource.onmessage = (event) => {
            try {
                const data = JSON.parse(event.data);
                
                // Â§ÑÁêÜËøõÂ∫¶Êõ¥Êñ∞
                if (data.type === 'progress') {
                    this.updateProgress(data.message);
                } else if (data.type === 'excel-progress') {
                    this.updateExcelProgress(data.message);
                }
                
                this.addLog(data.type, data.message);
            } catch (error) {
                console.error('Ëß£ÊûêSSEÊ∂àÊÅØÂ§±Ë¥•:', error);
            }
        };
        
        this.eventSource.onerror = () => {
            setTimeout(() => this.initSSE(), 3000);
        };
    }
    
    toggleLogPanel() {
        this.logPanelOpen = !this.logPanelOpen;
        if (this.logPanel) {
            this.logPanel.style.display = this.logPanelOpen ? 'flex' : 'none';
        }
    }
    
    closeLogPanel() {
        this.logPanelOpen = false;
        if (this.logPanel) {
            this.logPanel.style.display = 'none';
        }
    }
    
    updateProgress(progressMessage) {
        const progressData = JSON.parse(progressMessage);
        if (this.progressFill && this.progressText) {
            this.progressFill.style.width = progressData.percent + '%';
            this.progressText.textContent = `ËøõÂ∫¶: ${progressData.current}/${progressData.total}`;
            this.progressText.style.display = 'block';
        }
    }

    updateExcelProgress(progressMessage) {
        const progressData = JSON.parse(progressMessage);
        if (this.excelProgressFill && this.excelProgressText) {
            this.excelProgressFill.style.width = progressData.percent + '%';
            this.excelProgressText.textContent = `ËøõÂ∫¶: ${progressData.current}/${progressData.total}`;
            this.excelProgressText.style.display = 'block';
            this.excelProgressBar.style.display = 'block';
        }
    }

    addLog(type, message) {
        if (!this.logContent) return;
        
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = document.createElement('div');
        logEntry.className = `log-entry ${type}`;
        
        let icon = '';
        switch(type) {
            case 'success': icon = '‚úÖ'; break;
            case 'error': icon = '‚ùå'; break;
            case 'info': icon = '‚ÑπÔ∏è'; break;
            default: icon = 'üìù';
        }
        
        logEntry.innerHTML = `<strong>[${timestamp}] ${icon}</strong> ${message}`;
        this.logContent.appendChild(logEntry);
        this.logContent.scrollTop = this.logContent.scrollHeight;
        
        if (this.logContent.children.length > 1000) {
            this.logContent.removeChild(this.logContent.firstChild);
        }
    }

    waitForDependencies() {
        const checkDeps = () => {
            if (window.dataManager && window.simpleListRenderer) {
                console.log('ÊâÄÊúâ‰æùËµñÂ∑≤Âä†ËΩΩ');
                // ‰∏çÂÜçÊÅ¢Â§çÊï∞ÊçÆÔºåÊØèÊ¨°Âà∑Êñ∞ÈáçÊñ∞ÂºÄÂßã
            } else {
                setTimeout(checkDeps, 100);
            }
        };
        checkDeps();
    }

    initElements() {
        // Ê†∏ÂøÉÊåâÈíÆ
        this.processExcelBtn = document.getElementById('processExcelBtn');
        this.runAssessmentBtn = document.getElementById('runAssessmentBtn');
        this.downloadCsvBtn = document.getElementById('downloadCsvBtn');
        this.refreshTokenBtn = document.getElementById('refreshTokenBtn');
        
        // Êñá‰ª∂ËæìÂÖ•
        this.excelFileInput = document.getElementById('excelFile');
        this.fileName = document.getElementById('fileName');
        
        // Áä∂ÊÄÅÊòæÁ§∫
        this.tokenStatus = document.getElementById('tokenStatus');
        this.excelStatus = document.getElementById('excelStatus');
        this.assessmentStatus = document.getElementById('assessmentStatus');
        
        // ÊòæÁ§∫Âå∫Âüü
        this.csvDisplaySection = document.getElementById('csvDisplaySection');
        this.csvTableBody = document.getElementById('csvTableBody');
        this.csvTableHead = document.getElementById('csvTableHead');
        this.csvStats = document.getElementById('csvStats');
        this.csvFileName = document.getElementById('csvFileName');
        this.subtypeFilter = document.getElementById('subtypeFilter');
        this.questionTypeFilter = document.getElementById('questionTypeFilter');
        this.assessmentFileName = document.getElementById('assessmentFileName');
        
        // ËøõÂ∫¶ÂÖÉÁ¥†
        this.excelProgressBar = document.getElementById('excelProgressBar');
        this.excelProgressFill = document.getElementById('excelProgressFill');
        this.excelProgressText = document.getElementById('excelProgressText');
        this.progressBar = document.getElementById('progressBar');
        this.progressFill = document.getElementById('progressFill');
        this.progressText = document.getElementById('progressText');
        
        // Êó•ÂøóÈù¢Êùø
        this.logPanel = document.getElementById('logPanel');
        this.logContent = document.getElementById('logContent');
        this.logPanelOpen = false;
        
        // ÂàùÂßãÂåñSSE
        this.initSSE();
    }

    initEventListeners() {
        this.excelFileInput.addEventListener('change', (e) => this.handleFileSelect(e));
        this.processExcelBtn.addEventListener('click', () => this.processExcel());
        this.runAssessmentBtn.addEventListener('click', () => this.runAssessment());
        this.downloadCsvBtn.addEventListener('click', () => this.downloadCsv());
        this.refreshTokenBtn.addEventListener('click', () => this.refreshToken());
        this.subtypeFilter.addEventListener('change', () => this.filterData());
        this.questionTypeFilter.addEventListener('change', () => this.filterData());
        
        // Êó•ÂøóÈù¢Êùø‰∫ã‰ª∂
        const logToggle = document.getElementById('logToggle');
        const logPanel = document.getElementById('logPanel');
        const closeLog = document.getElementById('closeLog');
        
        if (logToggle) {
            logToggle.addEventListener('click', () => this.toggleLogPanel());
        }
        if (closeLog) {
            closeLog.addEventListener('click', () => this.closeLogPanel());
        }
        if (logPanel) {
            logPanel.addEventListener('click', (e) => {
                if (e.target === logPanel) this.closeLogPanel();
            });
        }
        
        // Êó•ÂøóÈù¢ÊùøÊãñÊãΩ
        this.initLogPanelDrag();
    }

    handleFileSelect(e) {
        const file = e.target.files[0];
        if (file) {
            this.fileName.textContent = `Â∑≤ÈÄâÊã©: ${file.name}`;
            this.processExcelBtn.disabled = false;
        } else {
            this.fileName.textContent = '';
            this.processExcelBtn.disabled = true;
        }
    }

    async refreshToken() {
        this.showStatus(this.tokenStatus, 'info', 'Ê≠£Âú®Âà∑Êñ∞Token...');
        this.refreshTokenBtn.disabled = true;

        try {
            const response = await fetch('/api/refresh-token', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });

            const result = await response.json();
            if (result.success) {
                this.showStatus(this.tokenStatus, 'success', '‚úÖ TokenÂà∑Êñ∞ÊàêÂäüÔºÅ');
            } else {
                this.showStatus(this.tokenStatus, 'error', `‚ùå TokenÂà∑Êñ∞Â§±Ë¥•: ${result.message}`);
            }
        } catch (error) {
            this.showStatus(this.tokenStatus, 'error', `‚ùå ÁΩëÁªúÈîôËØØ: ${error.message}`);
        } finally {
            this.refreshTokenBtn.disabled = false;
        }
    }

    async processExcel() {
        const file = this.excelFileInput.files[0];
        if (!file) {
            this.showStatus(this.excelStatus, 'error', '‚ùå ËØ∑ÂÖàÈÄâÊã©ExcelÊñá‰ª∂');
            return;
        }

        this.showStatus(this.excelStatus, 'info', 'Ê≠£Âú®Â§ÑÁêÜExcelÊñá‰ª∂...');
        this.processExcelBtn.disabled = true;
        this.processExcelBtn.textContent = 'Â§ÑÁêÜ‰∏≠...';

        try {
            const formData = new FormData();
            formData.append('excelFile', file);

            const response = await fetch('/process-excel', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (result.success) {
                // Â≠òÂÇ®Êï∞ÊçÆÂà∞ÂâçÁ´ØÂíåÂÜÖÂ≠ò
                this.currentSessionId = result.sessionId;
                
                // Ëé∑ÂèñÈ¢ÑËßàÊï∞ÊçÆ
                if (result.data && result.data.previewData) {
                    this.currentData = result.data.previewData;
                    window.dataManager.setData(this.currentData, this.currentSessionId);
                    
                    this.showStatus(this.excelStatus, 'success', `‚úÖ ExcelÂ§ÑÁêÜÊàêÂäüÔºÅÁîüÊàê ${result.data.outputRecords} Êù°ËÆ∞ÂΩï`);
                    this.refreshUI();
                    this.runAssessmentBtn.disabled = false;
                } else {
                    this.showStatus(this.excelStatus, 'success', `‚úÖ ExcelÂ§ÑÁêÜÊàêÂäüÔºÅ‰ºöËØùID: ${result.sessionId}`);
                    this.currentSessionId = result.sessionId;
                    this.runAssessmentBtn.disabled = false;
                }
                
                // ÈöêËóèExcelËøõÂ∫¶Êù°
                setTimeout(() => {
                    this.excelProgressBar.style.display = 'none';
                    this.excelProgressText.style.display = 'none';
                }, 2000);
            } else {
                this.showStatus(this.excelStatus, 'error', `‚ùå ExcelÂ§ÑÁêÜÂ§±Ë¥•: ${result.message}`);
            }
        } catch (error) {
            this.showStatus(this.excelStatus, 'error', `‚ùå ÁΩëÁªúÈîôËØØ: ${error.message}`);
        } finally {
            if (this.processExcelBtn.textContent.includes('Â§ÑÁêÜ‰∏≠')) {
                this.processExcelBtn.disabled = false;
                this.processExcelBtn.textContent = 'Â§ÑÁêÜExcel';
            }
            // ÈîôËØØÊó∂‰πüÈöêËóèËøõÂ∫¶Êù°
            setTimeout(() => {
                this.excelProgressBar.style.display = 'none';
                this.excelProgressText.style.display = 'none';
            }, 1000);
        }
    }

    async runAssessment() {
        if (!this.currentSessionId && !this.currentData) {
            this.showStatus(this.assessmentStatus, 'error', '‚ùå ËØ∑ÂÖàÂ§ÑÁêÜExcelÊñá‰ª∂');
            return;
        }

        this.showStatus(this.assessmentStatus, 'info', 'Ê≠£Âú®ÊâßË°åËØÑ‰º∞...');
        this.runAssessmentBtn.disabled = true;
        this.runAssessmentBtn.textContent = 'ËØÑ‰º∞‰∏≠...';
        
        // ÊòæÁ§∫ËøõÂ∫¶Êù°
        this.progressBar.style.display = 'block';
        this.progressFill.style.width = '0%';
        this.progressText.textContent = 'ÂáÜÂ§áÂºÄÂßãËØÑ‰º∞...';
        this.progressText.style.display = 'block';

        try {
            let requestBody;
            if (this.currentData) {
                // ‰ΩøÁî®ÂâçÁ´ØÊï∞ÊçÆ
                requestBody = { csvFile: 'frontend-data', data: this.currentData };
            } else {
                // ‰ΩøÁî®‰ºöËØùID
                requestBody = { csvFile: `session:${this.currentSessionId}` };
            }

            const response = await fetch('/api/run-assessment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(requestBody)
            });

            const result = await response.json();

            if (result.success) {
                this.showStatus(this.assessmentStatus, 'success', '‚úÖ ËØÑ‰º∞ÂÆåÊàêÔºÅ');
                
                // Ê£ÄÊü•ÊòØÂê¶ÊúâËøîÂõûÊï∞ÊçÆ
                if (result.data) {
                    // Áõ¥Êé•‰ΩøÁî®ËøîÂõûÁöÑÊï∞ÊçÆ
                    this.currentData = result.data;
                    window.dataManager.setData(this.currentData, this.currentSessionId);
                    this.refreshUI();
                    console.log('ËØÑ‰º∞ÁªìÊûúÂ∑≤Êõ¥Êñ∞');
                } else {
                    // ÂõûÈÄÄÂà∞Âä†ËΩΩ‰ºöËØùÊï∞ÊçÆ
                    setTimeout(() => {
                        this.loadSessionData();
                    }, 1000);
                }
            } else {
                this.addLog('error', 'ËØÑ‰º∞Â§±Ë¥•: ' + result.message);
                this.showStatus(this.assessmentStatus, 'error', `‚ùå ËØÑ‰º∞Â§±Ë¥•`);
            }
        } catch (error) {
            this.addLog('error', 'ËØÑ‰º∞ËØ∑Ê±ÇÂ§±Ë¥•: ' + error.message);
            this.showStatus(this.assessmentStatus, 'error', `‚ùå ËØÑ‰º∞ËØ∑Ê±ÇÂ§±Ë¥•`);
        } finally {
            this.runAssessmentBtn.disabled = false;
            this.runAssessmentBtn.textContent = 'ÂºÄÂßãËØÑ‰º∞';
            setTimeout(() => {
                this.progressBar.style.display = 'none';
                this.progressText.style.display = 'none';
            }, 2000);
        }
    }

    async loadSessionData() {
        if (!this.currentSessionId) return;
        
        try {
            const response = await fetch(`/api/preview/${this.currentSessionId}`);
            const result = await response.json();
            
            if (result.success && result.data) {
                this.currentData = result.data;
                window.dataManager.setData(this.currentData, this.currentSessionId);
                this.refreshUI();
            }
        } catch (error) {
            console.error('Âä†ËΩΩ‰ºöËØùÊï∞ÊçÆÂ§±Ë¥•:', error);
        }
    }

    downloadCsv() {
        try {
            if (this.currentData && window.dataManager) {
                // ‰ΩøÁî®ÂâçÁ´ØÁîüÊàêCSV
                window.dataManager.downloadCSV(`assessment_results_${Date.now()}.csv`);
                console.log('CSV‰∏ãËΩΩÊàêÂäüÔºàÂâçÁ´ØÁîüÊàêÔºâ');
            } else if (this.currentSessionId) {
                // ÂõûÈÄÄÂà∞ÊúçÂä°Âô®‰∏ãËΩΩ
                const url = `/download-csv/${this.currentSessionId}`;
                const link = document.createElement('a');
                link.href = url;
                link.download = '';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                console.log('CSV‰∏ãËΩΩÊàêÂäüÔºàÊúçÂä°Âô®ÁîüÊàêÔºâ');
            } else {
                throw new Error('Ê≤°ÊúâÂèØ‰∏ãËΩΩÁöÑÊï∞ÊçÆ');
            }
        } catch (error) {
            console.error('CSV‰∏ãËΩΩÂ§±Ë¥•:', error);
            alert('CSV‰∏ãËΩΩÂ§±Ë¥•: ' + error.message);
        }
    }

    refreshUI() {
        if (!this.currentData || this.currentData.length === 0) {
            this.csvDisplaySection.style.display = 'none';
            return;
        }

        this.displayData(this.currentData);
        this.csvDisplaySection.style.display = 'block';
        this.downloadCsvBtn.disabled = false;
        this.csvFileName.textContent = `üìÅ Êï∞ÊçÆÈ¢ÑËßà (${this.currentData.length}Êù°ËÆ∞ÂΩï)`;
        this.csvFileName.className = 'csv-filename loaded';
    }

    displayData(data) {
        if (!data || data.length === 0) {
            this.csvTableBody.innerHTML = '<tr><td colspan="100%">ÊöÇÊó†Êï∞ÊçÆ</td></tr>';
            return;
        }

        // Â°´ÂÖÖquestion_typeÁ≠õÈÄâÂô®
        this.populateQuestionTypeFilter(data);

        // ÂÆö‰πâÂàóÈ°∫Â∫è
        const columnOrder = [
            'question_text', 'context', 'block_result', 'block_start', 'block_end','ÂáÜÁ°ÆÁéá', 'ÂáÜÁ°ÆÁéá_ÁêÜÁî±', '‰∏ì‰∏öÂ∫¶_ÂàÜÊï∞', '‰∏ì‰∏öÂ∫¶_ÁêÜÁî±', 'ËØ≠Ê∞îÂêàÁêÜ_ÂàÜÊï∞', 'ËØ≠Ê∞îÂêàÁêÜ_ÁêÜÁî±','question_id', 'question_type', 'chatid', 'block_type', 'block_subtype'
        ];
        
        // Ëé∑ÂèñÊâÄÊúâÂàóÔºåÊåâÈ°∫Â∫èÊéíÂàó
        const allColumns = Object.keys(data[0]);
        const orderedColumns = columnOrder.filter(col => allColumns.includes(col));
        const remainingColumns = allColumns.filter(col => !columnOrder.includes(col));
        const columns = [...orderedColumns, ...remainingColumns];

        this.csvTableHead.innerHTML = `
            <tr>
                ${columns.map(col => {
                    const width = this.getColumnWidth(col);
                    const isSortable = this.isSortableColumn(col);
                    return `
                        <th class="${isSortable ? 'sortable' : ''}" data-column="${col}" data-sort="none" style="width: ${width}px;">
                            ${col}
                            <div class="resize-handle"></div>
                        </th>
                    `;
                }).join('')}
            </tr>
        `;
        
        // Ê∑ªÂä†ÊéíÂ∫è‰∫ã‰ª∂ÁõëÂê¨Âô®
        this.initColumnSorting();

        // ËøáÊª§Êï∞ÊçÆ
        const subtypeFilter = this.subtypeFilter.value;
        const questionTypeFilter = this.questionTypeFilter.value;
        let filteredData = data;
        
        if (subtypeFilter !== 'all') {
            filteredData = filteredData.filter(row => row.block_subtype === subtypeFilter);
        }
        if (questionTypeFilter !== 'all') {
            filteredData = filteredData.filter(row => row.question_type === questionTypeFilter);
        }

        // ÂàõÂª∫Ë°®Ê†ºÂÜÖÂÆπ
        this.renderTableBody(filteredData);

        this.updateCsvStats(data, filteredData);
    }

    populateQuestionTypeFilter(data) {
        const questionTypes = [...new Set(data.map(row => row.question_type).filter(type => type))];
        
        this.questionTypeFilter.innerHTML = '<option value="all">ÊòæÁ§∫ÂÖ®ÈÉ®</option>';
        questionTypes.forEach(type => {
            const option = document.createElement('option');
            option.value = type;
            option.textContent = type;
            this.questionTypeFilter.appendChild(option);
        });
    }

    filterData() {
        if (this.currentData) {
            this.displayData(this.currentData);
        }
    }



    isSortableColumn(columnName) {
        const sortableColumns = [
            'block_start',
            'block_end', 
            'ÂáÜÁ°ÆÁéá',
            '‰∏ì‰∏öÂ∫¶_ÂàÜÊï∞',
            'ËØ≠Ê∞îÂêàÁêÜ_ÂàÜÊï∞'
        ];
        return sortableColumns.includes(columnName);
    }

    getColumnWidth(columnName) {
        const widthMap = {
            'question_text': 220,
            'context': 150,
            'block_result': 500,
            'block_start': 70,
            'block_end': 70,
            'ÂáÜÁ°ÆÁéá': 80,
            'ÂáÜÁ°ÆÁéá_ÁêÜÁî±': 150,
            '‰∏ì‰∏öÂ∫¶_ÂàÜÊï∞': 80,
            '‰∏ì‰∏öÂ∫¶_ÁêÜÁî±': 150,
            'ËØ≠Ê∞îÂêàÁêÜ_ÂàÜÊï∞': 80,
            'ËØ≠Ê∞îÂêàÁêÜ_ÁêÜÁî±': 150,
            'question_id': 40,
            'question_type': 60,  
            'chatid': 50,
            'block_type': 50,
            'block_subtype': 80,
        };
        return widthMap[columnName] || 150;
    }

    initColumnSorting() {
        const sortableHeaders = this.csvTableHead.querySelectorAll('th.sortable');
        
        sortableHeaders.forEach(header => {
            header.addEventListener('click', (e) => {
                if (e.target.classList.contains('resize-handle')) return;
                
                const columnName = header.dataset.column;
                const currentSort = header.dataset.sort;
                
                sortableHeaders.forEach(h => {
                    if (h !== header) {
                        h.dataset.sort = 'none';
                        h.classList.remove('sort-asc', 'sort-desc');
                    }
                });
                
                let newSort = (currentSort === 'none' || currentSort === 'desc') ? 'asc' : 'desc';
                
                header.dataset.sort = newSort;
                header.classList.remove('sort-asc', 'sort-desc');
                header.classList.add(`sort-${newSort}`);
                
                this.sortTableData(columnName, newSort);
            });
        });
        
        this.initColumnResize();
    }

    sortTableData(columnName, direction) {
        if (!this.currentData || this.currentData.length === 0) return;
        
        const subtypeFilter = this.subtypeFilter.value;
        const questionTypeFilter = this.questionTypeFilter.value;
        let filteredData = [...this.currentData];
        
        if (subtypeFilter !== 'all') {
            filteredData = filteredData.filter(row => row.block_subtype === subtypeFilter);
        }
        if (questionTypeFilter !== 'all') {
            filteredData = filteredData.filter(row => row.question_type === questionTypeFilter);
        }
        
        filteredData.sort((a, b) => {
            let valueA = a[columnName];
            let valueB = b[columnName];
            
            if (columnName === 'block_start' || columnName === 'block_end' || 
                columnName.includes('_ÂàÜÊï∞')) {
                valueA = parseFloat(valueA) || 0;
                valueB = parseFloat(valueB) || 0;
            }
            
            if (valueA === null || valueA === undefined || valueA === '') valueA = direction === 'asc' ? Infinity : -Infinity;
            if (valueB === null || valueB === undefined || valueB === '') valueB = direction === 'asc' ? Infinity : -Infinity;
            
            if (direction === 'asc') {
                return valueA < valueB ? -1 : valueA > valueB ? 1 : 0;
            } else {
                return valueA > valueB ? -1 : valueA < valueB ? 1 : 0;
            }
        });
        
        this.renderTableBody(filteredData);
        this.updateCsvStats(this.currentData, filteredData);
    }

    renderTableBody(data) {
        // ‰ΩøÁî®‰∏éË°®Â§¥Áõ∏ÂêåÁöÑÂàóÈ°∫Â∫è
        const columnOrder = [
            'question_text', 'context', 'block_result', 'block_start', 'block_end',
            'ÂáÜÁ°ÆÁéá', 'ÂáÜÁ°ÆÁéá_ÁêÜÁî±', '‰∏ì‰∏öÂ∫¶_ÂàÜÊï∞', '‰∏ì‰∏öÂ∫¶_ÁêÜÁî±', 
            'ËØ≠Ê∞îÂêàÁêÜ_ÂàÜÊï∞', 'ËØ≠Ê∞îÂêàÁêÜ_ÁêÜÁî±',
            'question_id', 'question_type', 'chatid', 'block_type', 'block_subtype'
        ];
        
        this.csvTableBody.innerHTML = data.slice(0, 100).map(row => {
            const allColumns = Object.keys(row);
            const orderedColumns = columnOrder.filter(col => allColumns.includes(col));
            const remainingColumns = allColumns.filter(col => !columnOrder.includes(col));
            const columns = [...orderedColumns, ...remainingColumns];
            
            const cells = columns.map(key => {
                let value = row[key] || '';
                let cellClass = '';
                
                if (key.includes('_ÂàÜÊï∞') && value) {
                    cellClass = `score-cell score-${value}`;
                } else if ((key === 'block_start' || key === 'block_end') && value) {
                    cellClass = 'score-cell';
                    const numValue = parseFloat(value);
                    if (!isNaN(numValue)) {
                        value = numValue.toFixed(1) + 's';
                    }
                }
                
                if (key === 'block_result' || key.includes('_ÁêÜÁî±')) {
                    const rendered = window.simpleListRenderer ? 
                        window.simpleListRenderer.render(value) : 
                        String(value).replace(/\\n/g, '<br>');
                    return `<td class="${cellClass}"><div class="text-adaptive">${rendered}</div></td>`;
                } else {
                    const rendered = String(value).replace(/\\n/g, '<br>');
                    return `<td class="${cellClass}">${rendered}</td>`;
                }
            }).join('');
            
            return `<tr>${cells}</tr>`;
        }).join('');
    }

    updateCsvStats(allData, filteredData) {
        const totalRows = allData.length;
        const filteredRows = filteredData.length;
        const answerRows = filteredData.filter(row => row.block_type === 'answer').length;
        const textReplyRows = filteredData.filter(row => row.block_subtype === 'ÊñáÊú¨ÂõûÂ§ç').length;
        
        const evaluatedRows = filteredData.filter(row => 
            row['ÂáÜÁ°ÆÁéá'] && row['‰∏ì‰∏öÂ∫¶_ÂàÜÊï∞'] && row['ËØ≠Ê∞îÂêàÁêÜ_ÂàÜÊï∞']
        ).length;
        
        const scores = { accuracy: [], professionalism: [], tone: [] };
        const timings = { firstToken: [], duration: [] };
        
        filteredData.forEach(row => {
            if (row['ÂáÜÁ°ÆÁéá']) scores.accuracy.push(parseFloat(row['ÂáÜÁ°ÆÁéá']));
            if (row['‰∏ì‰∏öÂ∫¶_ÂàÜÊï∞']) scores.professionalism.push(parseFloat(row['‰∏ì‰∏öÂ∫¶_ÂàÜÊï∞']));
            if (row['ËØ≠Ê∞îÂêàÁêÜ_ÂàÜÊï∞']) scores.tone.push(parseFloat(row['ËØ≠Ê∞îÂêàÁêÜ_ÂàÜÊï∞']));
            
            if (row.block_start && row.block_end) {
                const startTime = parseFloat(row.block_start);
                const endTime = parseFloat(row.block_end);
                if (!isNaN(startTime) && !isNaN(endTime)) {
                    timings.firstToken.push(startTime);
                    timings.duration.push(endTime - startTime);
                }
            }
        });
        
        const avgAccuracy = scores.accuracy.length ? (scores.accuracy.reduce((a, b) => a + b, 0) / scores.accuracy.length).toFixed(2) : 'N/A';
        const avgProfessionalism = scores.professionalism.length ? (scores.professionalism.reduce((a, b) => a + b, 0) / scores.professionalism.length).toFixed(2) : 'N/A';
        const avgTone = scores.tone.length ? (scores.tone.reduce((a, b) => a + b, 0) / scores.tone.length).toFixed(2) : 'N/A';
        
        const avgFirstToken = timings.firstToken.length ? (timings.firstToken.reduce((a, b) => a + b, 0) / timings.firstToken.length).toFixed(1) : 'N/A';
        const avgDuration = timings.duration.length ? (timings.duration.reduce((a, b) => a + b, 0) / timings.duration.length).toFixed(1) : 'N/A';
        
        const minFirstToken = timings.firstToken.length ? Math.min(...timings.firstToken).toFixed(1) : 'N/A';
        const maxFirstToken = timings.firstToken.length ? Math.max(...timings.firstToken).toFixed(1) : 'N/A';
        const minDuration = timings.duration.length ? Math.min(...timings.duration).toFixed(1) : 'N/A';
        const maxDuration = timings.duration.length ? Math.max(...timings.duration).toFixed(1) : 'N/A';
        
        this.csvStats.innerHTML = `
            <div class="stats-item">
                <span class="stats-label">Êï∞ÊçÆÁªüËÆ°:</span>
            </div>
            <div class="stats-item">
                <span class="stats-label">ÊÄªË°åÊï∞:</span>
                <span class="stats-value">${totalRows}</span>
                <span class="stats-separator">|</span>
            </div>
            <div class="stats-item">
                <span class="stats-label">ÊòæÁ§∫Ë°åÊï∞:</span>
                <span class="stats-value">${filteredRows}</span>
                <span class="stats-separator">|</span>
            </div>
            <div class="stats-item">
                <span class="stats-label">ÊñáÊú¨ÂõûÂ§ç:</span>
                <span class="stats-value">${textReplyRows}</span>
                <span class="stats-separator">|</span>
            </div>
            <div class="stats-item">
                <span class="stats-label">Â∑≤ËØÑ‰º∞:</span>
                <span class="stats-value">${evaluatedRows}/${answerRows}</span>
                <span class="stats-separator">|</span>
            </div>
            <div class="stats-item timing-stats">
                <span class="stats-label">È¶ñtokenÂπ≥ÂùáÊó∂Èïø:</span>
                <span class="stats-value">${avgFirstToken}s (${minFirstToken}-${maxFirstToken})</span>
                <span class="stats-separator">|</span>
                <span class="stats-label">ÊÆµÂπ≥ÂùáÊó∂Èïø:</span>
                <span class="stats-value">${avgDuration}s (${minDuration}-${maxDuration})</span>
            </div>
            <div class="stats-item">
                <span class="stats-label">Âπ≥ÂùáÂàÜÊï∞:</span>
                <span class="stats-value">ÂáÜÁ°ÆÁéá: ${avgAccuracy} | ‰∏ì‰∏öÂ∫¶: ${avgProfessionalism} | ËØ≠Ê∞î: ${avgTone}</span>
                <span class="stats-separator">|</span>
            </div>
        `;
    }

    initColumnResize() {
        let isResizing = false;
        let currentColumn = null;
        let startX = 0;
        let startWidth = 0;
        
        document.addEventListener('mousedown', (e) => {
            if (e.target.classList.contains('resize-handle')) {
                isResizing = true;
                currentColumn = e.target.parentElement;
                startX = e.pageX;
                startWidth = currentColumn.offsetWidth;
                document.body.classList.add('resizing');
                e.preventDefault();
            }
        });
        
        document.addEventListener('mousemove', (e) => {
            if (!isResizing) return;
            
            const width = startWidth + (e.pageX - startX);
            if (width > 50) {
                currentColumn.style.width = width + 'px';
            }
        });
        
        document.addEventListener('mouseup', () => {
            if (isResizing) {
                isResizing = false;
                currentColumn = null;
                document.body.classList.remove('resizing');
            }
        });
    }

    initLogPanelDrag() {
        let isDragging = false;
        let startX, startY, startLeft, startTop;
        
        const logHeader = this.logPanel.querySelector('.log-header');
        if (!logHeader) return;
        
        logHeader.addEventListener('mousedown', (e) => {
            isDragging = true;
            startX = e.clientX;
            startY = e.clientY;
            const rect = this.logPanel.getBoundingClientRect();
            startLeft = rect.left;
            startTop = rect.top;
            
            document.addEventListener('mousemove', onMouseMove);
            document.addEventListener('mouseup', onMouseUp);
            e.preventDefault();
        });
        
        const onMouseMove = (e) => {
            if (!isDragging) return;
            
            const deltaX = e.clientX - startX;
            const deltaY = e.clientY - startY;
            
            this.logPanel.style.left = (startLeft + deltaX) + 'px';
            this.logPanel.style.top = (startTop + deltaY) + 'px';
            this.logPanel.style.right = 'auto';
        };
        
        const onMouseUp = () => {
            isDragging = false;
            document.removeEventListener('mousemove', onMouseMove);
            document.removeEventListener('mouseup', onMouseUp);
        };
    }
    


    
    showStatus(element, type, message) {
        element.className = `status ${type}`;
        element.textContent = message;
        element.style.display = 'block';

        if (type === 'success') {
            setTimeout(() => {
                element.style.display = 'none';
            }, 5000);
        }
    }
}

// ÂàùÂßãÂåñÂ∫îÁî®
document.addEventListener('DOMContentLoaded', () => {
    new OptimizedAssessmentApp();
});